menuUpdate: function (req, res) {
    upload.single('menu_image')(req, res, (err) => {
        if (err) {
            console.error('Error uploading file:', err);
            return res.status(500).json({
                message: 'Internal Server Error',
            });
        }

        console.log('Uploaded file:', req.file);

        const menu = {
            id_menu: req.body.id_menu,
            name_product: req.body.name_product,
            menu_type: req.body.settingType,
            menu_category: req.body.settingCategory,
            price: req.body.price,
            menu_unit: req.body.settingUnit,
            status: req.body.status,
            menu_picture: req.file ? `${req.file.filename}` : null,
            remain: 0
        };

        let name_ingredients = req.body.name_ingredient || [];
        let unit_quantity = req.body.quantity || [];
        let unit_id = req.body.setting_unit_id || [];
        let id_food_recipes = req.body.id_food_recipes || [];

        // Ensure these are arrays
        if (!Array.isArray(name_ingredients)) {
            name_ingredients = [name_ingredients];
        }
        if (!Array.isArray(unit_quantity)) {
            unit_quantity = [unit_quantity];
        }
        if (!Array.isArray(unit_id)) {
            unit_id = [unit_id];
        }
        if (!Array.isArray(id_food_recipes)) {
            id_food_recipes = [id_food_recipes];
        }

        // Check if there is an existing picture in the database
        MenuModel.getMenuById(menu.id_menu, (error, existingMenu) => {
            if (error) {
                console.error('Error fetching menu: ', error);
                return res.status(500).send('Internal Server Error');
            }

            // If no new file is uploaded and delete_flag is true, use the default image
            if (!req.file && req.body.delete_flag === 'true') {
                menu.menu_picture = 'Default_menu.png';
            } else if (!req.file && existingMenu && existingMenu.menu_picture) {
                // If no new file is uploaded, use the existing picture
                menu.menu_picture = existingMenu.menu_picture;
            }

            MenuModel.updateMenu(menu, (error, result) => {
                if (error) {
                    console.error('Error updating menu: ', error);
                    return res.status(500).send('Internal Server Error');
                } else {
                    const id_menu = req.body.id_menu;

                    let errorOccurred = false;

                    MenuModel.getMaxIdFoodRecipes((error, maxId) => {
                        if (error) {
                            console.error('Error getting max id_food_recipes: ', error);
                            return res.status(500).send('Internal Server Error');
                        }

                        // Get existing ingredients for the menu
                        MenuModel.getIngredientsByMenuId(id_menu, (error, existingIngredients) => {
                            if (error) {
                                console.error('Error fetching ingredients: ', error);
                                return res.status(500).send('Internal Server Error');
                            }

                            // Convert existing ingredients to a map for easy lookup
                            const existingIngredientsMap = new Map();
                            existingIngredients.forEach(ingredient => {
                                existingIngredientsMap.set(ingredient.id_food_recipes, ingredient);
                            });

                            // Process each ingredient from the form
                            name_ingredients.forEach((name_ingredient, index) => {
                                // Check if id_food_recipes is undefined or null
                                if (!id_food_recipes[index]) {
                                    id_food_recipes[index] = maxId + 1;
                                    maxId++;
                                }

                                const ingredient = {
                                    id_food_recipes: id_food_recipes[index],
                                    tbl_menu_id: id_menu,
                                    name_ingredient: name_ingredient,
                                    unit_quantity: unit_quantity[index],
                                    unit_id: unit_id[index],
                                };

                                console.log('ingredient:', ingredient);

                                // Check if the ingredient already exists
                                MenuModel.getIngredientByMenuIdAndNameIngredient(ingredient.tbl_menu_id, ingredient.name_ingredient, (error, existingIngredient) => {
                                    if (error) {
                                        console.error('Error fetching ingredient: ', error);
                                        errorOccurred = true;
                                    } else if (!existingIngredient) {
                                        console.log('Ingredient does not exist:', existingIngredient);
                                        // Only update if the ingredient does not exist
                                        MenuModel.updateIngredient(ingredient, (error, result) => {
                                            if (error) {
                                                console.error('Error updating ingredient: ', error);
                                                errorOccurred = true;
                                            }

                                            if (index === name_ingredients.length - 1) {
                                                if (errorOccurred) {
                                                    return res.status(500).send('Internal Server Error');
                                                } else {
                                                    // Remove ingredients that are not in the form
                                                    existingIngredients.forEach(existingIngredient => {
                                                        if (!id_food_recipes.includes(existingIngredient.id_food_recipes)) {
                                                            MenuModel.deleteIngredient(existingIngredient.id_food_recipes, (error, result) => {
                                                                if (error) {
                                                                    console.error('Error deleting ingredient: ', error);
                                                                    errorOccurred = true;
                                                                }
                                                            });
                                                        }
                                                    });

                                                    if (errorOccurred) {
                                                        return res.status(500).send('Internal Server Error');
                                                    } else {
                                                        return res.redirect(`/view_menu/${id_menu}`);
                                                    }
                                                }
                                            }
                                        });
                                    } else {
                                        console.log('Ingredient already exists:', existingIngredient);

                                        if (index === name_ingredients.length - 1) {
                                            if (errorOccurred) {
                                                return res.status(500).send('Internal Server Error');
                                            } else {
                                                // Remove ingredients that are not in the form
                                                existingIngredients.forEach(existingIngredient => {
                                                    if (!id_food_recipes.includes(existingIngredient.id_food_recipes)) {
                                                        MenuModel.deleteIngredient(existingIngredient.id_food_recipes, (error, result) => {
                                                            if (error) {
                                                                console.error('Error deleting ingredient: ', error);
                                                                errorOccurred = true;
                                                            }
                                                        });
                                                    }
                                                });

                                                if (errorOccurred) {
                                                    return res.status(500).send('Internal Server Error');
                                                } else {
                                                    return res.redirect(`/view_menu/${id_menu}`);
                                                }
                                            }
                                        }
                                    }
                                });
                            });
                        });
                    });
                }
            });
        });
    });
},